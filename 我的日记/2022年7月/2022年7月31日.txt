1、今天学习了如何在二分搜索树中删除元素，以及二分搜索树的局限性。在二分搜索树中删除最大值或最小值，要从根节点开始查看左孩子，
直到找到一个没有左孩子的节点，这个节点就是最小值，直接删除就可以了，如果这个节点有右孩子，那么就将这个右孩子代替当前节点，同
理，删除最大值要从根节点开始一直查看右孩子。如果要删除二分搜索树中指定的某个元素，那么如果这个元素大于根节点，那么就找该节点
的右孩子的左子树的节点来代替，这样就可确保删除该元素后，其右孩子更大，左孩子更小。同理，如果要删除的元素小于根节点，那么就找
该节点的左孩子的右子树代替。二分搜索树在一定情况下存在局限性，比如极端情况下它会退化成链表，此时时间复杂度成了O(n)。如果把Key
排序好之后一个个插入到二分搜索树中，此时它的高度就会变得非常高。它的解决办法是使用红黑树或平衡二叉树，当然这些还没有学。

2、今天出了二分搜索树之外，还回顾了一下学习java数据结构时的字典树(Trie)，这种树结构是我感觉时间复杂度上处理的最好的树结构，当然，
它也有局限性。虽然它的时间复杂度取决于Key的长度，但是这是种以空间换时间的算法，其每一个字符都可能包含至多字符集大小数目的指针。

3、明天计划：学习完并查集。